#include<iostream> #include<bits/stdc++.h> using namespace std;

class Edge
{
public:
int source; int dest; int weight;
};
int findParent(int v,int *parent){ if(parent[v]==v) return v;
return findParent(parent[v],parent);
}

int comp(Edge e1, Edge e2){
return e1.weight < e2.weight;//to sort array in incereasing order
}
void kruskals(Edge *input, int n, int E){
//sort the input array in accending order basded on weight sort(input,input+E,comp);

Edge *output = new Edge[n-1]; int *parent =new int[n];
for (int i = 0; i < n; i++)
{
/* code */ parent[i]=i;
}


int count=0;//no of edges added in mst int i=0;//currently under work edge

while (count != n-1)
{
/* code */
Edge currentEdge =input[i];
//check if we can add the current edge in mst or not
int sourceParent =findParent(currentEdge.source,parent); int destParent = findParent(currentEdge.dest,parent);

if(sourceParent != destParent){ output[count]=currentEdge; count++; parent[sourceParent]=destParent;
} i++;
}
for (int i = 0; i < n-1; i++)
{
 
/* code */
cout<<output[i].source<<"---"<<output[i].dest<<" :"<<output[i].weight<<endl;
}

}


int main(){ int E;
cout<<"Enter Number of edges"<<endl; cin>>E;
cout<<"\n Enter total number of vertices:"; int n;
cin>>n;
// create an array of type edge of size E
Edge *input = new Edge[E];//input is an array of size E, of typr Edge for (int i = 0; i < E; i++)
{
int a,b,wt; cin>>a>>b>>wt; input[i].source=a; input[i].dest=b; input[i].weight=wt;
// for undirected graph make the below code uncomment

}
//kruskal's implementation kruskals(input, n, E);


}

